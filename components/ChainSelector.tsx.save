'use client';

import { useState } from 'react';

export interface Chain {
  id: string;
  name: string;
  displayName: string;
  color: string;
  icon: string;
}

const SUPPORTED_CHAINS: Chain[] = [
  {
    id: 'base',
    name: 'base',
    displayName: 'Base',
    color: 'bg-blue-500',
    icon: 'ðŸ”µ'
  },
  {
    id: 'ethereum',
    name: 'ethereum', 
    displayName: 'Ethereum',
    color: 'bg-gray-700',
    icon: 'âŸ '
  },
  {
    id: 'arbitrum',
    name: 'arbitrum',
    displayName: 'Arbitrum',
    color: 'bg-blue-600',
    icon: 'ðŸ”·'
  },
  {
    id: 'polygon',
    name: 'polygon',
    displayName: 'Polygon',
    color: 'bg-purple-600',
    icon: 'ðŸŸ£'
  }
];

interface ChainSelectorProps {
  selectedChain: string;
  onChainChange: (chain: string) => void;
  isLoading?: boolean;
}

export default function ChainSelector({ selectedChain, onChainChange, isLoading }: ChainSelectorProps) {
  const [isOpen, setIsOpen] = useState(false);

  const selectedChainData = SUPPORTED_CHAINS.find(chain => chain.id === selectedChain);

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        disabled={isLoading}
        className={`
          flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 bg-white
          hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500
          ${isLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
          transition-colors duration-200
        `}
      >
        <span className="text-xl">{selectedChainData?.icon}</span>
        <span className="font-medium">{selectedChainData?.displayName}</span>
        <svg 
          className={`w-4 h-4 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 mt-2 w-48 bg-white border border-gray-300 rounded-lg shadow-lg z-50">
          {SUPPORTED_CHAINS.map((chain) => (
            <button
              key={chain.id}
              onClick={() => {
                onChainChange(chain.id);
                setIsOpen(false);
              }}
              className={`
                w-full flex items-center gap-3 px-4 py-3 text-left hover:bg-gray-50
                ${selectedChain === chain.id ? 'bg-blue-50 text-blue-700' : 'text-gray-700'}
                first:rounded-t-lg last:rounded-b-lg transition-colors duration-150
              `}
            >
              <span className="text-xl">{chain.icon}</span>
              <div>
                <div className="font-medium">{chain.displayName}</div>
                <div className="text-sm text-gray-500 capitalize">{chain.name}</div>
              </div>
              {selectedChain === chain.id && (
                <svg className="w-4 h-4 ml-auto text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              )}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}

