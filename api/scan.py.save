from datetime import datetime
import json
import os
import sys

# Add the root directory to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from backend.multichain_scanner import MultiChainTokenScanner
except ImportError:
    # For Vercel, we might need to import differently
    from multichain_scanner import MultiChainTokenScanner

def handler(request):
    """Vercel serverless function handler"""
    
    # Handle CORS preflight
    if request.method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
            }
        }
    
    try:
        # Get parameters from query string
        if hasattr(request, 'args'):
            chain = request.args.get('chain', 'base')
            block_count = int(request.args.get('blocks', '5'))  # Smaller default for Vercel
        else:
            # Fallback for different request formats
            chain = 'base'
            block_count = 5
        
        # Initialize scanner
        scanner = MultiChainTokenScanner()
        
        if scanner.set_chain(chain):
            # Scan blocks (limited for serverless)
            results = scanner.scan_recent_blocks(block_count)
            
            # Generate summary
            total_contracts = len(results)
            lp_contracts = len([r for r in results if r["lp_info"]["status"] == "YES"])
            
            response_data = {
                "success": True,
                "chain": chain,
                "blocks_scanned": block_count,
                "scan_time": datetime.now().isoformat(),
                "summary": {
                    "total_contracts": total_contracts,
                    "lp_contracts": lp_contracts,
                    "success_rate": round((lp_contracts/total_contracts*100), 2) if total_contracts > 0 else 0
                },
                "results": results[:10]  # Limit results for API response
            }
            
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                },
                'body': json.dumps(response_data, indent=2)
            }
        else:
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                },
                'body': json.dumps({
                    "success": False,
                    "error": f"Failed to connect to {chain} network"
                })
            }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            },
            'body': json.dumps({
                "success": False,
                "error": f"Scanner error: {str(e)}"
            })
        }

# For Vercel Python runtime
def main(request):
    return handler(request)


