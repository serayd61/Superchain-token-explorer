import React, { useState } from 'react';

interface UserIntent {
  originalText: string;
  intentType: string;
  parameters: any;
  confidence: number;
  reasoning: string;
  suggestedActions: string[];
}

interface ParseResult {
  success: boolean;
  intent?: UserIntent;
  error?: string;
  processingTime: number;
}

export default function IntentParserTest() {
  const [input, setInput] = useState('');
  const [result, setResult] = useState<ParseResult | null>(null);
  const [loading, setLoading] = useState(false);

  const testCases = [
    "I want to earn 15% on my $10k ETH",
    "Safest way to earn on USDC, low risk please",
    "Find me arbitrage opportunities over $500 profit",
    "Bridge 1000 USDC from Ethereum to Base",
    "Swap 5000 USDT to ETH with low fees",
    "I want to hedge my ETH position against market crash",
    "Best yield farming strategy for $50k portfolio"
  ];

  const parseIntent = async (testInput?: string) => {
    const inputToUse = testInput || input;
    if (!inputToUse.trim()) return;

    setLoading(true);
    try {
      const response = await fetch('/api/intent/parse', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userInput: inputToUse,
          userId: 'test-user'
        }),
      });

      const data = await response.json();
      setResult(data);
    } catch (error) {
      setResult({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        processingTime: 0
      });
    } finally {
      setLoading(false);
    }
  };

  const getIntentTypeColor = (type: string) => {
    const colors = {
      yield: 'bg-green-100 text-green-800',
      swap: 'bg-blue-100 text-blue-800',
      bridge: 'bg-purple-100 text-purple-800',
      arbitrage: 'bg-yellow-100 text-yellow-800',
      hedge: 'bg-red-100 text-red-800',
      portfolio: 'bg-indigo-100 text-indigo-800',
      unknown: 'bg-gray-100 text-gray-800'
    };
    return colors[type as keyof typeof colors] || colors.unknown;
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-600';
    if (confidence >= 0.6) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          ðŸ§  Intent Parser Test Suite
        </h1>
        <p className="text-gray-600">
          Test the AI-powered natural language DeFi intent parser
        </p>
      </div>

      {/* Input Section */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold mb-4">Test Custom Input</h2>
        
        <div className="space-y-4">
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="e.g., I want to earn 10%+ yield on my $5000 USDC with moderate risk"
            className="w-full h-24 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            maxLength={500}
          />
          
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-500">
              {input.length}/500 characters
            </span>
            <button
              onClick={() => parseIntent()}
              disabled={loading || !input.trim()}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {loading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Parsing...
                </>
              ) : (
                'Parse Intent'
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Quick Test Cases */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold mb-4">Quick Test Cases</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {testCases.map((testCase, index) => (
            <button
              key={index}
              onClick={() => {
                setInput(testCase);
                parseIntent(testCase);
              }}
              disabled={loading}
              className="p-3 text-left bg-gray-50 hover:bg-gray-100 rounded-lg border border-gray-200 disabled:opacity-50 transition-colors"
            >
              <span className="text-sm text-gray-700">"{testCase}"</span>
            </button>
          ))}
        </div>
      </div>

      {/* Results Section */}
      {result && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">Parse Result</h2>
            <span className="text-sm text-gray-500">
              {result.processingTime}ms
            </span>
          </div>

          {result.success && result.intent ? (
            <div className="space-y-4">
              {/* Intent Type & Confidence */}
              <div className="flex items-center gap-4">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getIntentTypeColor(result.intent.intentType)}`}>
                  {result.intent.intentType.toUpperCase()}
                </span>
                <span className={`font-semibold ${getConfidenceColor(result.intent.confidence)}`}>
                  {(result.intent.confidence * 100).toFixed(1)}% confidence
                </span>
              </div>

              {/* Parameters */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-2">Parameters:</h3>
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-sm text-gray-700 whitespace-pre-wrap">
                    {JSON.stringify(result.intent.parameters, null, 2)}
                  </pre>
                </div>
              </div>

              {/* Reasoning */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-2">AI Reasoning:</h3>
                <p className="text-gray-700 bg-blue-50 rounded-lg p-4">
                  {result.intent.reasoning}
                </p>
              </div>

              {/* Suggested Actions */}
              {result.intent.suggestedActions.length > 0 && (
                <div>
                  <h3 className="font-semibold text-gray-900 mb-2">Suggested Actions:</h3>
                  <ul className="space-y-2">
                    {result.intent.suggestedActions.map((action, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-blue-600 mt-1">â€¢</span>
                        <span className="text-gray-700">{action}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          ) : (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <h3 className="font-semibold text-red-800 mb-2">Error:</h3>
              <p className="text-red-700">{result.error}</p>
            </div>
          )}
        </div>
      )}

      {/* API Status */}
      <div className="bg-gray-50 rounded-lg p-4 text-center">
        <p className="text-sm text-gray-600">
          ðŸš€ Testing Intent Parser v1.0.0 | 
          <span className="ml-2">Claude API Integration Active</span>
        </p>
      </div>
    </div>
  );
}
