/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NotifierInterface extends ethers.utils.Interface {
  functions: {
    "subscribe(uint256,address,bytes)": FunctionFragment;
    "subscriber(uint256)": FunctionFragment;
    "unsubscribe(uint256)": FunctionFragment;
    "unsubscribeGasLimit()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeGasLimit",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscriber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeGasLimit",
    data: BytesLike
  ): Result;

  events: {
    "Subscription(uint256,address)": EventFragment;
    "Unsubscription(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Subscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsubscription"): EventFragment;
}

export class Notifier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NotifierInterface;

  functions: {
    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "subscribe(uint256,address,bytes)"(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subscriber: string;
      0: string;
    }>;

    "subscriber(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subscriber: string;
      0: string;
    }>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "unsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    unsubscribeGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "unsubscribeGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  subscribe(
    tokenId: BigNumberish,
    newSubscriber: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "subscribe(uint256,address,bytes)"(
    tokenId: BigNumberish,
    newSubscriber: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  subscriber(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "subscriber(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  unsubscribe(
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "unsubscribe(uint256)"(
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  unsubscribeGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "unsubscribeGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "subscribe(uint256,address,bytes)"(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "subscriber(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsubscribeGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "unsubscribeGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Subscription(
      tokenId: BigNumberish | null,
      subscriber: string | null
    ): EventFilter;

    Unsubscription(
      tokenId: BigNumberish | null,
      subscriber: string | null
    ): EventFilter;
  };

  estimateGas: {
    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "subscribe(uint256,address,bytes)"(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscriber(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "unsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    unsubscribeGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "unsubscribeGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "subscribe(uint256,address,bytes)"(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subscriber(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "unsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    unsubscribeGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unsubscribeGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
