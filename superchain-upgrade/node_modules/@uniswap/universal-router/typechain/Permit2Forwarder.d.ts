/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Permit2ForwarderInterface extends ethers.utils.Interface {
  functions: {
    "permit(address,tuple,bytes)": FunctionFragment;
    "permit2()": FunctionFragment;
    "permitBatch(address,tuple,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitBatch",
    values: [
      string,
      {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitBatch",
    data: BytesLike
  ): Result;

  events: {};
}

export class Permit2Forwarder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Permit2ForwarderInterface;

  functions: {
    permit(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    permit2(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "permit2()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "permitBatch(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  permit(
    owner: string,
    permitSingle: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      };
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
    owner: string,
    permitSingle: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      };
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  permit2(overrides?: CallOverrides): Promise<string>;

  "permit2()"(overrides?: CallOverrides): Promise<string>;

  permitBatch(
    owner: string,
    _permitBatch: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      }[];
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "permitBatch(address,(tuple[],address,uint256),bytes)"(
    owner: string,
    _permitBatch: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      }[];
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    permit(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    permit2(overrides?: CallOverrides): Promise<string>;

    "permit2()"(overrides?: CallOverrides): Promise<string>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "permitBatch(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    permit(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    permit2(overrides?: CallOverrides): Promise<BigNumber>;

    "permit2()"(overrides?: CallOverrides): Promise<BigNumber>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "permitBatch(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    permit(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    permit2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "permit2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "permitBatch(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
