/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LPFeeLibraryInterface extends ethers.utils.Interface {
  functions: {
    "DYNAMIC_FEE_FLAG()": FunctionFragment;
    "MAX_LP_FEE()": FunctionFragment;
    "OVERRIDE_FEE_FLAG()": FunctionFragment;
    "REMOVE_OVERRIDE_MASK()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DYNAMIC_FEE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LP_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OVERRIDE_FEE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_OVERRIDE_MASK",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DYNAMIC_FEE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_LP_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OVERRIDE_FEE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_OVERRIDE_MASK",
    data: BytesLike
  ): Result;

  events: {};
}

export class LPFeeLibrary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LPFeeLibraryInterface;

  functions: {
    DYNAMIC_FEE_FLAG(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "DYNAMIC_FEE_FLAG()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    MAX_LP_FEE(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "MAX_LP_FEE()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    OVERRIDE_FEE_FLAG(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "OVERRIDE_FEE_FLAG()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    REMOVE_OVERRIDE_MASK(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "REMOVE_OVERRIDE_MASK()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;
  };

  DYNAMIC_FEE_FLAG(overrides?: CallOverrides): Promise<number>;

  "DYNAMIC_FEE_FLAG()"(overrides?: CallOverrides): Promise<number>;

  MAX_LP_FEE(overrides?: CallOverrides): Promise<number>;

  "MAX_LP_FEE()"(overrides?: CallOverrides): Promise<number>;

  OVERRIDE_FEE_FLAG(overrides?: CallOverrides): Promise<number>;

  "OVERRIDE_FEE_FLAG()"(overrides?: CallOverrides): Promise<number>;

  REMOVE_OVERRIDE_MASK(overrides?: CallOverrides): Promise<number>;

  "REMOVE_OVERRIDE_MASK()"(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    DYNAMIC_FEE_FLAG(overrides?: CallOverrides): Promise<number>;

    "DYNAMIC_FEE_FLAG()"(overrides?: CallOverrides): Promise<number>;

    MAX_LP_FEE(overrides?: CallOverrides): Promise<number>;

    "MAX_LP_FEE()"(overrides?: CallOverrides): Promise<number>;

    OVERRIDE_FEE_FLAG(overrides?: CallOverrides): Promise<number>;

    "OVERRIDE_FEE_FLAG()"(overrides?: CallOverrides): Promise<number>;

    REMOVE_OVERRIDE_MASK(overrides?: CallOverrides): Promise<number>;

    "REMOVE_OVERRIDE_MASK()"(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    DYNAMIC_FEE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    "DYNAMIC_FEE_FLAG()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_LP_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OVERRIDE_FEE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    "OVERRIDE_FEE_FLAG()"(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_OVERRIDE_MASK(overrides?: CallOverrides): Promise<BigNumber>;

    "REMOVE_OVERRIDE_MASK()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DYNAMIC_FEE_FLAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DYNAMIC_FEE_FLAG()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LP_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_LP_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OVERRIDE_FEE_FLAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OVERRIDE_FEE_FLAG()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_OVERRIDE_MASK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REMOVE_OVERRIDE_MASK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
