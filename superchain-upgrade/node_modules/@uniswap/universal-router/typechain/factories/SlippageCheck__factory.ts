/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SlippageCheck } from "../SlippageCheck";

export class SlippageCheck__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SlippageCheck> {
    return super.deploy(overrides || {}) as Promise<SlippageCheck>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SlippageCheck {
    return super.attach(address) as SlippageCheck;
  }
  connect(signer: Signer): SlippageCheck__factory {
    return super.connect(signer) as SlippageCheck__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SlippageCheck {
    return new Contract(address, _abi, signerOrProvider) as SlippageCheck;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "maximumAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountRequested",
        type: "uint128",
      },
    ],
    name: "MaximumAmountExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "minimumAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountReceived",
        type: "uint128",
      },
    ],
    name: "MinimumAmountInsufficient",
    type: "error",
  },
];

const _bytecode =
  "0x6080806040523460175760109081601c823930815050f35b5f80fdfe5f80fdfea164736f6c634300081a000a";
