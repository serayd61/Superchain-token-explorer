/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Pool } from "../Pool";

export class Pool__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Pool> {
    return super.deploy(overrides || {}) as Promise<Pool>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Pool {
    return super.attach(address) as Pool;
  }
  connect(signer: Signer): Pool__factory {
    return super.connect(signer) as Pool__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Pool {
    return new Contract(address, _abi, signerOrProvider) as Pool;
  }
}

const _abi = [
  {
    inputs: [],
    name: "InvalidFeeForExactOut",
    type: "error",
  },
  {
    inputs: [],
    name: "NoLiquidityToReceiveFees",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolNotInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceCurrentX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "PriceLimitAlreadyExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "PriceLimitOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "TickLiquidityOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
    ],
    name: "TickLowerOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
    ],
    name: "TickUpperOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
    ],
    name: "TicksMisordered",
    type: "error",
  },
];

const _bytecode =
  "0x6080806040523460175760109081601c823930815050f35b5f80fdfe5f80fdfea164736f6c634300081a000a";
