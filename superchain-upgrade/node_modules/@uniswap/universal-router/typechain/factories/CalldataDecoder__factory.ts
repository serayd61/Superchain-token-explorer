/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { CalldataDecoder } from "../CalldataDecoder";

export class CalldataDecoder__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<CalldataDecoder> {
    return super.deploy(overrides || {}) as Promise<CalldataDecoder>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CalldataDecoder {
    return super.attach(address) as CalldataDecoder;
  }
  connect(signer: Signer): CalldataDecoder__factory {
    return super.connect(signer) as CalldataDecoder__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalldataDecoder {
    return new Contract(address, _abi, signerOrProvider) as CalldataDecoder;
  }
}

const _abi = [
  {
    inputs: [],
    name: "SliceOutOfBounds",
    type: "error",
  },
];

const _bytecode =
  "0x6080806040523460175760109081601c823930815050f35b5f80fdfe5f80fdfea164736f6c634300081a000a";
